#include "stm32f4xx.h"

// Định nghĩa chân LED và nút nhấn
#define LED_GREEN_PIN   (1 << 5)  // PA5 (LED xanh)
#define LED_RED_PIN     (1 << 6)  // PA6 (LED đỏ)
#define SW1_PIN         (1 << 13) // PC13 (SW1)
#define TRIG_PIN        (1 << 0)  // PA0 (TRIG HCSR04)
#define ECHO_PIN        (1 << 1)  // PA1 (ECHO HCSR04)

// Định nghĩa các chân I2C cho LCD
#define LCD_SCL_PIN     (1 << 8)  // PB8 (SCL)
#define LCD_SDA_PIN     (1 << 9)  // PB9 (SDA)

// Biến lưu trạng thái hệ thống
volatile uint8_t system_state = 0; // 0 - dừng, 1 - hoạt động

// Hàm delay 1ms (sử dụng Timer hoặc vòng lặp đơn giản)
void delay_ms(uint32_t ms) {
    SysTick->LOAD = (SystemCoreClock / 1000) - 1; // 1ms tick
    SysTick->VAL = 0; // Đặt lại giá trị bộ đếm
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;

    while (ms--) {
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk));
    }

    SysTick->CTRL = 0; // Tắt SysTick
}

// Hàm cấu hình GPIO và các chân
void GPIO_Init(void) {
    // Bật clock cho GPIOA, GPIOB và GPIOC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;

    // Cấu hình PA5 làm Output (LED xanh)
    GPIOA->MODER &= ~(3 << (5 * 2));  // Clear MODER5
    GPIOA->MODER |= (1 << (5 * 2));   // Set MODER5 to Output
    GPIOA->OTYPER &= ~(1 << 5);       // Push-pull
    GPIOA->OSPEEDR |= (3 << (5 * 2)); // High speed

    // Cấu hình PA6 làm Output (LED đỏ)
    GPIOA->MODER &= ~(3 << (6 * 2));  // Clear MODER6
    GPIOA->MODER |= (1 << (6 * 2));   // Set MODER6 to Output
    GPIOA->OTYPER &= ~(1 << 6);       // Push-pull
    GPIOA->OSPEEDR |= (3 << (6 * 2)); // High speed

    // Cấu hình PA0 làm Output (TRIG HCSR04)
    GPIOA->MODER &= ~(3 << (0 * 2));  // Clear MODER0
    GPIOA->MODER |= (1 << (0 * 2));   // Set MODER0 to Output

    // Cấu hình PA1 làm Input (ECHO HCSR04)
    GPIOA->MODER &= ~(3 << (1 * 2));  // Clear MODER1
    GPIOA->PUPDR |= (1 << (1 * 2));   // Pull-up
    GPIOC->PUPDR |= (1 << (13 * 2));  // Pull-up cho PC13 (SW1)

    // Cấu hình I2C (PB8 cho SCL và PB9 cho SDA)
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;  // Bật clock cho I2C1
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Bật clock cho GPIOB

    // Cấu hình I2C SCL (PB8) và SDA (PB9) cho chế độ Alternate Function
    GPIOB->MODER &= ~(3 << (8 * 2)) & ~(3 << (9 * 2)); // Clear MODER8 và MODER9
    GPIOB->MODER |= (2 << (8 * 2)) | (2 << (9 * 2));   // Set to alternate function
    GPIOB->AFR[1] |= (4 << ((8 - 8) * 4)) | (4 << ((9 - 8) * 4)); // AF4 cho I2C

    // Cấu hình I2C
    I2C1->CR2 = (16 << 0); // 16 MHz clock
    I2C1->CCR = (80 << 0); // Tốc độ 100kHz
    I2C1->TRISE = 17;      // Thời gian rise cho I2C
    I2C1->CR1 |= I2C_CR1_PE; // Bật I2C
}

// Hàm cấu hình Timer 2 để tạo tần số nháy 1Hz
void Timer_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;  // Bật clock cho TIM2

    // Cấu hình Timer 2 cho chế độ upcounting, tần số 1Hz
    TIM2->PSC = (SystemCoreClock / 1000000) - 1;   // Prescaler để có tần số 1MHz (1 tick = 1µs)
    TIM2->ARR = 1000000 - 1;  // Auto-reload register để tạo tần số 1Hz (1s period)
    TIM2->CR1 |= TIM_CR1_CEN; // Bật Timer 2
}

// Hàm điều khiển trạng thái LED xanh và LED đỏ
void LED_Control(float distance) {
    if (system_state == 1) {
        // Nháy LED xanh với tần số 1Hz
        if (TIM2->SR & TIM_SR_UIF) { // Kiểm tra trạng thái của timer (đã đến 1s chưa)
            TIM2->SR &= ~TIM_SR_UIF;  // Clear the update flag
            GPIOA->ODR ^= LED_GREEN_PIN; // Đảo trạng thái PA5 (LED xanh)
        }

        // Điều khiển LED đỏ tùy theo khoảng cách
        if (distance >= 0 && distance < 10) {
            // Khoảng cách rất gần, LED đỏ nháy nhanh (10Hz)
            GPIOA->ODR ^= LED_RED_PIN;
            delay_ms(50); // Delay 50ms tương ứng với 10Hz
        } else if (distance >= 10 && distance < 50) {
            // Khoảng cách gần, LED đỏ nháy với tần số thấp hơn (5Hz)
            GPIOA->ODR ^= LED_RED_PIN;
            delay_ms(100); // Delay 100ms tương ứng với 5Hz
        } else {
            // Khoảng cách xa, LED đỏ tắt
            GPIOA->ODR &= ~LED_RED_PIN;
        }
    } else {
        GPIOA->ODR &= ~LED_GREEN_PIN; // Tắt LED xanh khi hệ thống dừng
        GPIOA->ODR &= ~LED_RED_PIN;   // Tắt LED đỏ khi hệ thống dừng
    }
}

// Hàm đọc khoảng cách từ cảm biến HCSR04
float HCSR04_Read(void) {
    uint32_t time;

    // Gửi xung 10µs đến TRIG
    GPIOA->BSRR = (1 << 0);   // Set PA0 (TRIG HIGH)
    delay_ms(10);             // Trễ 10µs
    GPIOA->BSRR = (1 << 16);  // Reset PA0 (TRIG LOW)

    // Chờ ECHO lên HIGH
    while (!(GPIOA->IDR & (1 << 1))); // Đợi PA1 (ECHO HIGH)

    // Bắt đầu đo thời gian
    TIM2->CNT = 0;            // Đặt bộ đếm về 0
    TIM2->CR1 |= (1 << 0);    // Bật Timer (CEN = 1)

    // Chờ ECHO xuống LOW
    while (GPIOA->IDR & (1 << 1)) {
        if (TIM2->CNT >= 0xFFFF) { // Kiểm tra tràn Timer
            TIM2->CR1 &= ~(1 << 0); // Tắt Timer
            return -1;              // Trả về lỗi
        }
    }

    // Dừng Timer và lấy giá trị thời gian
    time = TIM2->CNT;
    TIM2->CR1 &= ~(1 << 0);    // Tắt Timer

    // Tính toán khoảng cách (cm)
    return (float)time / 58.0; // Khoảng cách = time (µs) / 58
}

// Hàm hiển thị lên LCD
void LCD_Write_Command(uint8_t cmd) {
    I2C1->DR = cmd;
    while (!(I2C1->SR1 & I2C_SR1_TXE));
}

void LCD_Write_Data(uint8_t data) {
    I2C1->DR = data;
    while (!(I2C1->SR1 & I2C_SR1_TXE));
}

void LCD_Init(void) {
    LCD_Write_Command(0x38); // Chế độ 8-bit
    LCD_Write_Command(0x0C); // Hiển thị, không nhấp nháy
    LCD_Write_Command(0x06); // Tăng con trỏ sau mỗi lần viết
    LCD_Write_Command(0x01); // Xóa màn hình
    delay_ms(5);
}

void LCD_Print(char *str) {
    while (*str) {
        LCD_Write_Data(*str++);
    }
}

int main(void) {
    // Cấu hình hệ thống
    SystemInit();
    GPIO_Init();
    Timer_Init();
    LCD_Init();

    // Biến để lưu khoảng cách
    float distance = 0;

    while (1) {
        // Kiểm tra trạng thái của nút SW1
        if (GPIOC->IDR & SW1_PIN) {
            if (system_state == 0) {
                system_state = 1; // Bắt đầu hoạt động
            } else {
                system_state = 0; // Dừng hệ thống
            }

            delay_ms(200); // Debounce cho SW1
        }

        // Đọc khoảng cách từ cảm biến
        if (system_state == 1) {
            distance = HCSR04_Read();

            char buffer[16]; // Tạo buffer để định dạng dữ liệu
            LCD_Write_Command(0x01); // Xóa màn hình
            LCD_Print("Status: 1 (Active)");
            LCD_Write_Command(0xC0); // Dòng thứ 2
            sprintf(buffer, "Distance: %.2f", distance); // Định dạng khoảng cách
            LCD_Print(buffer); // Hiển thị chuỗi
        } else {
            LCD_Write_Command(0x01); // Xóa màn hình
            LCD_Print("Status: 0 (Inactive)");
            LCD_Write_Command(0xC0); // Dòng thứ 2
            LCD_Print("Distance: ---");
        }

        // Điều khiển LED
        LED_Control(distance);
    }
}

